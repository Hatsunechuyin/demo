//https://jingyan.baidu.com/article/359911f5a9e0bc57fe030617.html(matlab GUI怎么设计点击菜单项切换GUI界面？)

整体的毕设流程：https://github.com/Hatsunechuyin/demo.git
				https://wenku.baidu.com/view/ddd23318a2161479171128f3.html
				https://www.docin.com/p-1985520811.html
				https://www.docin.com/p-705535263.html?docfrom=rrela
				https://www.docin.com/p-1298702920.html
				
				这人的博客：https://blog.csdn.net/zhoufan900428/article/details/12883693

毕业设计结构目录
1、-------
2、图像变换
	2.1图像几何变换
		2.1.1.平移
		2.1.2.镜像
		2.1.1.旋转
		2.1.2.缩放
		2.1.1.裁剪
	2.2图像变换
		2.2.1频域变换
			2.1	傅立叶变换
			2.2	哈达玛-沃尔什变换变换	
			2.3	离散余弦变换
				https://blog.csdn.net/l641208111/article/details/84550952			
		2.2.2小波变换
			2.1压缩
			https://blog.csdn.net/ebowtang/article/details/50477720
			压缩比=压缩前字节数/压缩后字节数，如第一次压缩的压缩比=199680/148296
3.编码
	https://www.docin.com/p-1781135371.html?docfrom=rrela
	https://blog.csdn.net/weixin_39569242/article/details/81156518
	哈夫曼编码：https://blog.csdn.net/tengweitw/article/details/45478497
				https://blog.csdn.net/gaussrieman123/article/details/68060207
				http://www.doc88.com/p-7864984101090.html
				https://www.ilovematlab.cn/thread-12813-1-1.htm
	预测编码：https://blog.csdn.net/dai_wen/article/details/78891644
	3.1.
4.增强
	4.2	灰度变换	
	4.1	直方图均衡化	
	4.3	空间域平滑	
	4.4	空间域锐化	
			梯度算子(微分法)
			其他锐化算子
			拉普拉斯算子
	4.5	频率域图像增强	
	https://blog.csdn.net/u012679707/article/details/78236474
5.复原
https://max.book118.com/html/2017/0628/118727842.shtm
	1逆滤波复原法（一般不考虑噪声） 
	2维纳滤波 
	3约束最小二乘法
	https://blog.csdn.net/yi_tech_blog/article/details/54605146
6.分割
	https://blog.csdn.net/KYJL888/article/details/78253734	
	https://blog.csdn.net/qq_28942201/article/details/79376188
	https://blog.csdn.net/bentleydelll/article/details/82456150
	https://blog.csdn.net/weixin_43418716/article/details/83629009
	https://blog.csdn.net/m0_37565736/article/details/79840487#%E4%BA%8C%E5%9F%BA%E4%BA%8E%E5%8C%BA%E5%9F%9F%E7%9A%84%E5%9B%BE%E5%83%8F%E5%88%86%E5%89%B2
	http://www.elecfans.com/rengongzhineng/605584_2.html
	最小值：https://blog.csdn.net/u010839382/article/details/30799465
	https://blog.csdn.net/whuhan2013/article/details/53977659
	四叉树必须图像是2的整次幂


为方便叙述设第一个GUI文件名为GUI_1，第二个GUI文件名为GUI_2
具体方法：
情况一：想打开GUI_2且保留第一个GUI_1：
先设置GUI_2的Visible为'off'（双击GUI设计界面空白处设置），然后在GUI_1的控件的Callback中写下如下代码：
c=GUI_2;
set(c,'Visible','on');
若想在GUI_2中设置控件关闭GUI_2则可以在该控件的Callback中写下：
set(handles.Figure2,'Visible','off');
或：
close(GUI_2);
情况二：想打开GUI_2且关闭GUI_1
原理同情况一，在GUI_1的控件的Callback中写下：
c=GUI_2;
set(c,'Visible','on');
set(handles.Figure1,'Visible','off'); (或：close(GUI_1))
注：这里默认GUI_1和GUI_2的Tag值分别是Figure1和Figure2，即handes.***中的***是GUI_1和GUI_2的Tag值（也是双击GUI设计界面空白处设置）。
灵活运用Visible属性是关键。


//还需要考虑到多个的情况


http://www.ilovematlab.cn/thread-260923-1-1.html数据间的传递

c=handles.uipanel1;
set(c,'Visible','off');隐藏控件

http://www.ilovematlab.cn/thread-21797-2-1.html(句柄中变量的判断  例:不存在字段'I')



//4.7
val=get(handles.popmenu,'value'); %这是获取当前选项的位置，从上到下是1,2,3...
str=get(handles.popmenu,'string');
set(handles.popmenu,'string'，"{1,2,3,4}");这样子才能获取到值
str(val) %这个将返回当前选项的内容，若是纯数字用str2num(str(val))

1. 三行标题
a= 1; b= 2; c = 3; d= 4;
title( { 'Plot', ['a = ', num2str(a), 'b = ',num2str(b)], ['c = ', num2str(c),',d = ',...num2str(d) ] } )
Notice：有两点，一是title中引入中括号[ ]，每对中括号表示一行；二是多行[ ]用{ }括起来
2.两行标题
a = 1; b = 2; c = 3; d =4;
title( { 'Plot', ['a = ', num2str(a), ',b = ',num2str(b), ...',c = ', num2str(c),', d= ',num2str(d) ] } )
xlabel,ylabel,text,legend等中此用法类似
#end
  
傅里叶变换：https://www.cnblogs.com/tenderwx/p/5245859.html 
数字图像傅里叶变换的物理意义及简单应用:https://blog.csdn.net/u013921430/article/details/79934162
2.2二维离散傅里叶变换图像性质
1、图像经过二维傅里叶变换后，其变换系数矩阵具有如下性质：若变换矩阵原点设在中心，其频谱能量集中分布在变换系数短阵的中心附近(图中阴影区)。若所用的二维傅里叶变换矩阵的原点设在左上角，那么图像信号能量将集中在系数矩阵的四个角上。这是由二维傅里叶变换本身性质决定的。同时也表明一股图像能量集中低频区域。
2、图像灰度变化缓慢的区域，对应它变换后的低频分量部分；图像灰度呈阶跃变化的区域，对应变换后的高频分量部分。除颗粒噪音外，图像细节的边缘、轮廓处都是灰度变化突变区域，它们都具有变换后的高频分量特征。


很多都是对二维图像进行计算的，而彩色图像是三维的
你用输入图像b是由imread得到的a加上噪声得到的而imread读到的图像a通常是3维rgb图，是三维矩阵直接用medfilt2是不对的，可以先用rgb2gray(a)将a先转换为灰度矩阵

图像增强：https://blog.csdn.net/su_yuheng/article/details/78544648
	      https://blog.csdn.net/qq_34206952/article/details/82833586
		  https://blog.csdn.net/weixin_39569242/article/details/81156341
		  https://www.cnblogs.com/kkyyhh96/p/6505584.html

//19.4.15
		图像锐化：https://blog.csdn.net/u010703122/article/details/49308361
				  https://blog.csdn.net/samkieth/article/details/50389845
				  https://wenku.baidu.com/view/92b910da76a20029bd642d45.html
					梯度算子(微分法)
					其他锐化算子  https://www.docin.com/p-1721495503.html?docfrom=rrela
					拉普拉斯算子
		锐化图像 = 原图像 + 加重的边缘

具体参考：http://www.cnblogs.com/kkyyhh96/p/6505473.html
2	图像变换	7
	2.1	傅立叶变换	7
	2.2	哈达玛变换	12https://blog.csdn.net/qq_31811537/article/details/80516410
					  https://blog.csdn.net/samkieth/article/details/50389845
	2.3	离散余弦变换	13
3	图像增强	14
	3.2	灰度变换	16
	3.1	直方图均衡化	14
	3.3	空间域平滑	18
	3.4	空间域锐化	22
			梯度算子(微分法)
			其他锐化算子
			拉普拉斯算子
	3.5	频率域图像增强	28
	
图像复原：https://blog.csdn.net/fly_egg/article/details/60764374
		  https://blog.csdn.net/weixin_39569242/article/details/81156482
		  https://blog.csdn.net/u014722627/article/details/79817074
		  https://max.book118.com/html/2017/0628/118727842.shtm
		  （下面这两个整合在一起）
		  直接逆滤波：https://blog.csdn.net/yi_tech_blog/article/details/53954025
					  https://blog.csdn.net/weixin_41730407/article/details/80455612
三、图像复原经典方法
	1逆滤波复原法（一般不考虑噪声） 
	2维纳滤波 
	3约束最小二乘法
	
图像分割:https://blog.csdn.net/m0_37565736/article/details/79840487

图像RGB分离成三个通道：https://blog.csdn.net/qq_33297776/article/details/52253734
三通道合成彩色图片：https://zhidao.baidu.com/question/438765266.html

图像变换：https://blog.csdn.net/weixin_39569242/article/details/80070196

高通跟低通滤波进行图片增强：https://blog.csdn.net/weixin_39569242/article/details/81156413（可以用switch语句来进行）
选择一灰度图像，进行低通滤波，观察滤波效果
选择一灰度图像，进行高通滤波，观察滤波效果
										d1=2;
巴特沃斯			高通滤波			d2=4;%截止半径
										d3=8;
			---->				----->
										d1=20;
高斯				低通滤波			d2=50;
										d3=300;
										

基础知识：https://wenku.baidu.com/view/0113863283c4bb4cf7ecd1ba.html
		  https://wenku.baidu.com/view/4d5375be18e8b8f67c1cfad6195f312b3069eb7a.html
		  
		  
MATLAB - 为什么imshow(g,[])可以正常显示，而imshow(g)却显示空白图像？
Q：为什么imshow(g,[])可以正常显示，而imshow(g)却显示空白图像？
A：数据类型如果是double，imshow的处理范围是0-1
数据类型如果是uint8，imshow的处理范围是0-255
如果数据是0-255的，类型又是double，直接imshow会把大于1的都当成1，就是一片白了
解决方法
1 imshow(uint8(img));
2 imshow(img, []);

//--------------------------4.16------------------------------------
锐化：https://www.cnblogs.com/fydeblog/p/6748411.html

//--------------------------4.17------------------------------------
上面的逆滤波
4.18 思路，先设计噪声是图像失真，之后着两种算法进行比较



Gray=rgb2gray(Source);
%以下程序为对原图像进行行程编码，压缩 ?
Gray_Linear=Gray(:); 
Gray_Length=length(Gray_Linear); 
j=1; 
index(1)=1; 
for z=1:1:(length(Gray_Linear)-1) %行程编码程序段 ?
    if Gray_Linear(z)==Gray_Linear(z+1); 
        index(j)=index(j)+1; 
    else
        Encode(j)=Gray_Linear(z);
        j=j+1; 
        index(j)=1;
    end 
end
Encode(j)=Gray_Linear(length(Gray_Linear)); %最后一个像素数据
index=uint8(index);
k=1;
for i=1:1:j
    if index(i)==1
        Encode_hex(k)=Encode(i);% 十六进制的次数或者灰度值
        k=k+1;
    else
        Encode_hex(k)=192+index(i);
        k=k+1;
        Encode_hex(k)=Encode(i);
        k=k+1;
    end
end
Encode_hex=dec2hex(Encode_hex);
Encode_hex_Length=size(Encode_hex,1);%计算行程编码后的所占字节数，Encode_hex_Length
index_Lenght=length(index);
CR=Gray_Length/Encode_hex_Length; %比较压缩前与压缩后的大小 ?
%行程编码解码 ?
l=1; 
for m=1:index_Lenght 
    for n=1:1:index(m) 
        Decode_temp(l)=Encode(m);
        l=l+1; 
    end 
end 
disp(Decode_temp);
Decode=reshape(Decode_temp,6,4873); %重建二位图像数组 ?
figure(1);
subplot(121);imshow(Gray);title('原始灰度图'); %显示原图的二值图像 ?
subplot(122);imshow(Gray);title('解压缩恢复后的图像'); %显示解压缩恢复后的图像 ?
disp('压缩比：'); 
disp(CR); 
disp('原图像数据的长度：'); 
disp(Gray_Length); 
disp('压缩后图像数据的长度'); 
disp(Encode_hex_Length); 
disp('解压缩后的数据长度'); 
disp(length(Decode_temp));



Gray=rgb2gray(Source);
%以下程序为对原图像进行行程编码，压缩 ?
Gray_Linear=Gray(:); ?
Gray_Length=length(Gray_Linear); ?
j=1; ?index(1)=1; ?
for z=1:1:(length(Gray_Linear)-1) %行程编码程序段 ?
????if Gray_Linear(z)==Gray_Linear(z+1); ?
????????index(j)=index(j)+1; ?
????else ?
????????Encode(j)=Gray_Linear(z);
????????j=j+1; ?
????????index(j)=1;
????end ?
end
Encode(j)=Gray_Linear(length(Gray_Linear)); ??%最后一个像素数据
index=uint8(index);
k=1;
for i=1:1:j
????if index(i)==1
????????Encode_hex(k)=Encode(i);???% 十六进制的次数或者灰度值
????????k=k+1;
????else
????????Encode_hex(k)=192+index(i);
????????k=k+1;
????????Encode_hex(k)=Encode(i);
????????k=k+1;
????end
end
Encode_hex=dec2hex(Encode_hex);
Encode_hex_Length=size(Encode_hex,1);%计算行程编码后的所占字节数，Encode_hex_Length
index_Lenght=length(index); ?
CR=Gray_Length/Encode_hex_Length; ??%比较压缩前与压缩后的大小 ?
%行程编码解码 ?
l=1; ?
for m=1:index_Lenght ?
????for n=1:1:index(m) ?
????????Decode_temp(l)=Encode(m);
????????l=l+1; ?
????end ?
end ?
Decode=reshape(Decode_temp,500,500); ???%重建二位图像数组 ?
figure(1);
subplot(121);imshow(Gray);title('原始灰度图'); ???%显示原图的二值图像 ?
subplot(122);imshow(Decode);title('解压缩恢复后的图像'); ?%显示解压缩恢复后的图像 ?
disp('压缩比：'); ?
disp(CR); ?
disp('原图像数据的长度：'); ?
disp(Gray_Length); ?
disp('压缩后图像数据的长度'); ?
disp(Encode_hex_Length); ?
disp('解压缩后的数据长度'); ?
disp(length(Decode_temp));



I = imread('C:\Users\Administrator.SC-201902211420\Desktop\1858370454.png');
 I=rgb2gray(I);
[M,N] = size(I);
 I1 = I(:);
 P = zeros(1,256);
 %获取各符号的概率；
 for i = 0:255
     P(i+1) = length(find(I1 == i))/(M*N);
 end
 k = 0:255;
 dict = huffmandict(k,P); %生成字典
 enco = huffmanenco(I1,dict); %编码
 deco = huffmandeco(enco,dict); %解码
 Ide = col2im(deco,[M,N],[M,N],'distinct'); %把向量重新转换成图像块；
 subplot(1,2,1);imshow(I);title('original image');
 subplot(1,2,2);imshow(uint8(Ide));title('deco image');